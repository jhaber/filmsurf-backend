var Url = require('url');
var Redis = require('redis');
var Q = require('q');

var connect = function(connectString) {
    console.log('Opening Redis connection to ' + connectString);
    var redisUrl = Url.parse(connectString);
    var client = Redis.createClient(redisUrl.port, redisUrl.hostname);
    client.auth(redisUrl.auth.split(":")[1]);
    return client;
};

var client = connect(process.env.REDISCLOUD_URL);
var active = false;

client.on('connect', function() {
    console.log('Connection to Redis established, waiting for server to be ready');
});

client.on('ready', function() {
    active = true;
    console.log('Successfully connected to Redis');
});

client.on('error', function() {
    active = false;
    console.log('Error connecting to Redis');
});

client.on('end', function() {
    active = false;
    console.log('Connection to Redis ended');
});

exports.save = function(keyArray, value, ttl) {
    if (active) {
        var key = keyArray.join(':');
        return setValue(key, JSON.stringify(value)).then(setTtl(key, ttl));
    } else {
        return Q.reject();
    }
};

exports.retrieve = function(keyArray, callback) {
    if (active) {
        var key = keyArray.join(':');
        return Q.all(getValue(key), getTtl(key));
    } else {
        return Q.reject();
    }
};

function getValue(key) {
    var deferred = Q.defer();

    client.get(key, function(err, data) {
        if (err) {
            console.log('Error getting value for key ' + key + ': ' + err);
            deferred.reject(err);
        } else if (data) {
            deferred.resolve(JSON.parse(data));
        } else {
            deferred.reject();
        }
    });

    return deferred.promise;
}

function setValue(key, value) {
    var deferred = Q.defer();

    client.set(key, value, function(err) {
        if (err) {
            console.log('Error setting key ' + key + ': ' + err);
            deferred.reject(err);
        } else {
            deferred.resolve();
        }
    });

    return deferred.promise;
}

function getTtl(key) {
    var deferred = Q.defer();

    /*client.ttl(key, function(err, ttl) {
        if (err) {
            console.log('Error getting TTL for key ' + key + ': ' + err);
            deferred.reject(err);
        } else if (ttl) {
            deferred.resolve(ttl);
        } else {
            deferred.reject();
        }
    });*/

    deferred.resolve(604800);

    return deferred.promise;
}

function setTtl(key, ttl) {
    var deferred = Q.defer();

    client.expire(key, ttl, function(err) {
        if (err) {
            console.log('Error setting key ' + key + ': ' + err);
            deferred.reject(err);
        } else {
            deferred.resolve();
        }
    });

    return deferred.promise;
}