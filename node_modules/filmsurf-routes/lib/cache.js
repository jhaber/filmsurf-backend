var EventEmitter = require('events').EventEmitter;
var MongoClient = require('mongodb').MongoClient;
require('date-utils');

module.exports = { emitter: new EventEmitter(), functions: {} };

var Movies = undefined;
var Search = undefined;

var ensureIndex = function (collection) {
    collection.ensureIndex({ id: 1 }, { unique: true, w: 1 }, function(err) {
        if (err) {
            console.log('Error ensuring index on ' + collection.collectionName +': ' + err);
        }
    });
};

console.log('Opening mongo connection to ' + process.env.MONGOLAB_URI);
MongoClient.connect(process.env.MONGOLAB_URI, function (err, db) {
    if (err) {
        console.log('Error connecting to mongo: ' + err);
    } else {
        console.log('Successfully connected to mongo');

        Movies = db.collection('movies');
        Search = db.collection('search');

        ensureIndex(Movies);
        ensureIndex(Search);
    }

    module.exports.emitter.emit('ready');
});

module.exports.functions.movies = {
    save: function (id, movie) {
        save(Movies, id, movie);
    },
    retrieve: function (id, callback) {
        retrieve(Movies, id, callback);

    },
    evict: function() {
        console.log('Starting to evict movies');
        runEviction(Movies, function (wrapper, callback) {
            var createDate = wrapper._id.getTimestamp();
            var releaseDates = undefined;
            if (wrapper && wrapper.data && wrapper.data.rotten_tomatoes) {
                releaseDates = wrapper.data.rotten_tomatoes.release_dates;
            }

            if (shouldEvictMovie(createDate, releaseDates)) {
               remove(Movies, wrapper, callback);
            } else {
                callback();
            }
        });
    }
};

module.exports.functions.search = {
    save: function (query, results) {
        save(Search, query, results);
    },
    retrieve: function (query, callback) {
        retrieve(Search, query, callback);
    },
    evict: function() {
        console.log('Starting to evict searches');
        runEviction(Search, function (wrapper, callback) {
            var createDate = wrapper._id.getTimestamp();

            if (shouldEvictSearch(createDate)) {
                remove(Search, wrapper, callback);
            } else {
                callback();
            }
        });
    }
};

var evictionEmitter = new EventEmitter();
var evictionsCompleted = 0;

evictionEmitter.on('done', function() {
    evictionsCompleted++;

    if (evictionsCompleted === 2) {
        module.exports.emitter.emit('done');
    }
});

var totals = {};

var moviesProcessed = 0;
var searchesProcessed = 0;

evictionEmitter.on('movies', function() {
    moviesProcessed++;

    if (moviesProcessed === totals.movies) {
        evictionEmitter.emit('done');
    }
});

evictionEmitter.on('search', function() {
    searchesProcessed++;

    if (searchesProcessed === totals.search) {
        evictionEmitter.emit('done');
    }
});

var save = function (collection, id, data) {
    if (!collection) return;

    var wrapper = { 'id': id, 'data': data };

    collection.findAndModify({ 'id': id }, [], wrapper, { upsert: true, w: 1, new: true }, function (err) {
        if (err) {
            console.log('Error persisting data: ' + err);
        }
    });
};

var retrieve = function (collection, id, callback) {
    if (!collection) callback(undefined);

    collection.findOne({ 'id': id }, function (err, wrapper) {
        if (err) {
            console.log('Error querying for data: ' + err);
            callback(undefined);
        }

        if (wrapper) {
            callback(wrapper.data);
        } else {
            callback(undefined);
        }
    });
};

var runEviction = function (collection, callback) {
    if (!collection) {
        evictionEmitter.emit('done');
    }

    var cursor = collection.find({}, { snapshot: true, batchSize: 100 });

    cursor.count(function(err, total) {
        if (err) {
            console.log('Error getting count of items: ' + err);
            evictionEmitter.emit('done');
        } else {
            var type = collection.collectionName;

            totals[type] = total;
            cursor.each(function(err, wrapper) {
                if (err) {
                    console.log('Error while evicting ' + type + ': ' + err);
                    evictionEmitter.emit(type);
                } else if (wrapper) {
                    callback(wrapper, function() {
                        evictionEmitter.emit(type);
                    });
                } else {
                    evictionEmitter.emit(type);
                }
            });
        }
    });
};

var remove = function (collection, wrapper, callback) {
    collection.remove({ _id: wrapper._id }, { w: 1 }, function (err) {
        if (err) {
            console.log('Error removing document ' + id + ' from collection ' + collection.collectionName + ': ' + err);
        }
        callback();
    });
};

var shouldEvictMovie = function(createDate, releaseDates) {
    var release = new Date().addYears(-5);
    if (releaseDates) {
        if (releaseDates.theater) {
            release = dateFromString(releaseDates.theater);
        } else if (releaseDates.dvd) {
            release = dateFromString(releaseDates.dvd);
        }
    }

    var movieAge = release.getDaysBetween(new Date());
    var entryAge = createDate.getDaysBetween(new Date());

    return entryAge > maxAge(movieAge);
};

var shouldEvictSearch = function(createDate) {
    var entryAge = createDate.getDaysBetween(new Date());

    return entryAge > 7;
};

var dateFromString = function(dateString) {
    var parts = dateString.split("-");
    return new Date(parseInt(parts[0]), parseInt(parts[1]) - 1, parseInt(parts[2]));
};

var maxAge = function(movieAge) {
    return Math.ceil(movieAge / 365);
};

