var TMDb = require('tmdbv3').init(process.env.TMDB_API_KEY);
var Q = require('q');
require('date-utils');

console.log('Using TMDb API Key: ' + process.env.TMDB_API_KEY);

exports.retrieve = function (id) {
    var deferred = Q.defer();

    Request.get(request, function (err, response, body) {
        if (!err && response && response.statusCode === 200) {
            deferred.resolve([ body, expiration(body), imdbId(body) ]);
        } else {
            if (err) {
                console.log('Error retrieving URL: ' + retrievePath + ', ' + err);
                deferred.reject(err);
            } else if (response && response.statusCode === 404) {
                deferred.reject(404);
            } else if (response) {
                console.log('Error retrieving URL: ' + retrievePath + ', ' + JSON.stringify(response));
                deferred.reject(response);
            } else {
                console.log('Error retrieving URL: ' + retrievePath);
                deferred.reject();
            }
        }
    });

    return deferred.promise;
};

exports.search = function (query, page) {
    var deferred = Q.defer();

    Request.get(request, function (err, response, body) {
        if (!err && response && response.statusCode === 200) {
            deferred.resolve([ body, 604800 ]);
        } else {
            if (err) {
                console.log('Search error: ' + err);
                deferred.reject(err);
            } else if (response) {
                console.log('Search error: ' + JSON.stringify(response));
                deferred.reject(response);
            } else {
                console.log('Search error');
                deferred.reject();
            }
        }
    });

    return deferred.promise;
};

function expiration(movie) {
    var release = new Date().addYears(-7);

    if (movie.release_date && movie.release_date.lenth) {
        release = dateFromString(movie.release_date);
    }

    var movieAge = release.getDaysBetween(new Date());
    if (movieAge < 1) movieAge = 1;

    var daysToCache = Math.ceil(movieAge / 365);

    return daysToCache * 86400;
}

function imdbId(movie) {
    return movie.alternate_ids ? movie.alternate_ids.imdb : undefined;
}

function dateFromString(dateString) {
    var parts = dateString.split("-");
    return new Date(parseInt(parts[0]), parseInt(parts[1]) - 1, parseInt(parts[2]));
}

