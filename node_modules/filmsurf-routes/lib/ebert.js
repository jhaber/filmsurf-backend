var cheerio = require('cheerio');
var Request = require('request');
var Q = require('q');
var RateLimiter = require('limiter').RateLimiter;
var fs = require('fs');
require('date-utils');

function createMonthMap() {
    var monthMap = {};
    for (var i = 0; i < 12; i++) {
        var date = new Date();
        date.setDate(1);
        date.setMonth(i);
        monthMap[date.getMonthAbbr()] = i;
    }
    return monthMap;
}

var DB = JSON.parse(fs.readFileSync(__dirname + '/../lib/ebert-db.json', 'utf8'));
var rtLimiter = new RateLimiter(1, 'second');
var monthMap = createMonthMap();

exports.retrieveByRottenTomatoesId = function(rottenTomatoesId) {
    var deferred = Q.defer();

    if (DB.reviews[rottenTomatoesId]) {
        deferred.resolve(DB.reviews[rottenTomatoesId]);
    } else {
        deferred.reject();
    }

    return deferred.promise;
};

exports.update = function() {
    keepScraping(1).then(function() {
        fs.writeFileSync(__dirname + '/../lib/ebert-db.json', JSON.stringify(DB), 'utf8');
        console.log('Done updating');
    });
};

function keepScraping(page) {
    return scrapePage(page).then(function(shouldContinue) {
        if (shouldContinue) {
            return keepScraping(page + 1);
        } else {
            return Q.resolve();
        }
    });
}

function scrapePage(page) {
    return retrievePage(page).then(function(htmlString) {
        var reviews = parseHtml(htmlString);

        return transformReviews(reviews).then(function(newReviews) {
            var shouldContinue = true;

            for (var i = 0; i < newReviews.length; i++ ) {
                var newReview = newReviews[i];

                if (DB.reviews[newReview.rt_id]) {
                    shouldContinue = false;
                } else {
                    DB.reviews[newReview.rt_id] = newReview;
                }
            }

            return shouldContinue;
        });
    }).fail(function() {
        return Q.resolve(true);
    });
}

function retrievePage(page) {
    var deferred = Q.defer();

    var url = 'http://www.rottentomatoes.com/critic/roger-ebert/movies.php?limit=50&page=' + page;

    Request.get(url, function(err, response, body) {
        if (!err && response && response.statusCode === 200 && body) {
            deferred.resolve(body);
        } else {
            console.log('Rotten Tomatoes error: ' + url);
            console.log(err);
            console.log(JSON.stringify(response));
            console.log(body);
            deferred.reject();
        }
    });

    return deferred.promise;
}

function parseHtml(htmlString) {
    var $ = cheerio.load(htmlString);
    return $('div#criticsReviewsChart_main table.rt_table tbody tr').map(function(i, review) {
        var cells = $(review).find('td');
        var rating = $(($(cells[0]).find('span'))[0]).attr('title').trim().split('/')[0];
        var rtUrl = 'http://www.rottentomatoes.com' + $(($(cells[2]).find('a'))[0]).attr('href');
        var ebertLinks = $(cells[3]).find('a');
        var ebertUrl = undefined;
        var ebertSummary = undefined;
        if (ebertLinks.length > 1) {
            ebertUrl = 'http://www.rottentomatoes.com' + $(ebertLinks[0]).attr('href');
            var summary = $(ebertLinks[0]).text().trim();
            var temp = summary.indexOf('"') === 0 ? summary.substring(1) : summary;
            var temp2 = temp.indexOf('"', temp.length - 1) !== -1 ? temp.substring(0, temp.length - 1) : temp;
            ebertSummary = temp2.trim();
        }
        var postedDateString = $(($(cells[3]).find('div'))[0]).text().trim().substring(7);
        var postedDate = dateFromString(postedDateString);
        return {
            'rating': Number(rating),
            rt_url: rtUrl,
            ebert_url: ebertUrl,
            ebert_summary: ebertSummary,
            date: postedDate
        };
    });
}

function transformReviews(reviews) {
    var promises = [];

    for (var i = 0; i < reviews.length; i++) {
        var review = reviews[i];
        promises.push(addRottenTomatoesId(review));
    }

    return Q.allResolved(promises).then(function(promises) {
        var reviews = [];

        promises.forEach(function(promise) {
            if (promise.isFulfilled()) {
                reviews.push(promise.valueOf());
            }
        });

        return reviews;
    });
}

function addRottenTomatoesId(review) {
    return fetchRottenTomatoesId(review).then(function(rottenTomatoesId) {
        review.rt_id = rottenTomatoesId;
        delete review.rt_url;

        return review;
    }).fail(function() {
        return Q.reject(review);
    });
}

function fetchRottenTomatoesId(review) {
    var deferred = Q.defer();

    rtLimiter.removeTokens(1, function() {
        Request.get(review.rt_url, function(err, response, body) {
            if (!err && response && response.statusCode === 200 && body) {
                var rtId = findRottenTomatoesId(body);
                deferred.resolve(rtId);
            } else {
                console.log('Rotten Tomatoes error: ' + review.rt_url);
                deferred.reject();
            }
        });
    });

    return deferred.promise;
}

function findRottenTomatoesId(rottenTomatoesString) {
    var $ = cheerio.load(rottenTomatoesString);
    return parseInt($('div.body_main div.movie_content_area div#mob_rating_widget').attr('data-movie'));
}

function dateFromString(dateString) {
    var parts = dateString.split(' ');
    var month = monthMap[parts[0]];
    var day = parseInt(parts[1]);
    var year = parts[2];
    return new Date(year, month, day);
}
