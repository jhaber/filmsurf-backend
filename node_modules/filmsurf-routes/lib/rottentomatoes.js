var Request = require('request');
require('date-utils');

var host = 'http://api.rottentomatoes.com';
var basePath = '/api/public/v1.0';

var searchPath = host + basePath + '/movies.json';

var apiKey = process.env.ROTTEN_TOMATOES_API_KEY;

console.log('Using Rotten Tomatoes API Key: ' + apiKey);

exports.retrieve = function (id, callback) {
    var retrievePath = host + basePath + '/movies/' + encodeURIComponent(id) + '.json';

    var request = {};
    request.url = retrievePath;
    request.qs = { 'apikey': apiKey };
    request.json = true;

    Request.get(request, function (error, response, body) {
        if (!error && response && response.statusCode === 200) {
            callback(body, expiration(body));
        } else {
            if (error) {
                console.log('Error retrieving URL: ' + retrievePath + ', ' + error);
            }

            if (response && response.statusCode === 404) {
                callback({ error: true, code: 404 }, 604800);
                return;
            } else if (response) {
                console.log('Status code retrieving URL: ' + retrievePath + ', ' + response.statusCode);
            }

            callback({ error: true, code: 500 });
        }
    });
};

exports.search = function (query, page, callback) {
    var request = {};
    request.url = searchPath;
    request.qs = { 'q': query,
                   'page': page + 1,
                   'apikey': apiKey };
    request.json = true;

    Request.get(request, function (error, response, body) {
        if (!error && response && response.statusCode === 200) {
            callback(body, 604800);
        } else {
            if (error) {
                console.log('Search error: ' + error);
            }

            if (response.statusCode !== 200) {
                console.log('Search status code: ' + response.statusCode);
            }

            callback({ error: true, code: 500 })
        }
    });
};

var expiration = function(movie) {
    var release = new Date().addYears(-7);

    if (movie.release_dates) {
        var dates = movie.release_dates;

        if (dates.theater) {
            release = dateFromString(dates.theater);
        } else if (dates.dvd) {
            release = dateFromString(dates.dvd);
        }
    }

    var movieAge = release.getDaysBetween(new Date());
    if (movieAge < 1) movieAge = 1;

    var daysToCache = Math.ceil(movieAge / 365);

    return daysToCache * 86400;
};

var dateFromString = function(dateString) {
    var parts = dateString.split("-");
    return new Date(parseInt(parts[0]), parseInt(parts[1]) - 1, parseInt(parts[2]));
};

