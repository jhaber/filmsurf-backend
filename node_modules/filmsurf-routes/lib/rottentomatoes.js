var Request = require('request');
var Q = require('q');
require('date-utils');

var host = 'http://api.rottentomatoes.com';
var basePath = '/api/public/v1.0';

var searchPath = host + basePath + '/movies.json';

var apiKey = process.env.ROTTEN_TOMATOES_API_KEY;

console.log('Using Rotten Tomatoes API Key: ' + apiKey);

exports.retrieve = function (id) {
    var deferred = Q.defer();

    var retrievePath = host + basePath + '/movies/' + encodeURIComponent(id) + '.json';

    var request = {};
    request.url = retrievePath;
    request.qs = { 'apikey': apiKey };
    request.json = true;

    Request.get(request, function (err, response, body) {
        if (!err && response && response.statusCode === 200) {
            deferred.resolve([ body, expiration(body), imdbId(body) ]);
        } else {
            if (err) {
                console.log('Error retrieving URL: ' + retrievePath + ', ' + err);
                deferred.reject(err);
            } else if (response && response.statusCode === 404) {
                deferred.reject(404);
            } else if (response) {
                console.log('Error retrieving URL: ' + retrievePath + ', ' + JSON.stringify(response));
                deferred.reject(response);
            } else {
                console.log('Error retrieving URL: ' + retrievePath);
                deferred.reject();
            }
        }
    });

    return deferred.promise;
};

exports.search = function (query, page) {
    var deferred = Q.defer();

    var request = {};
    request.url = searchPath;
    request.qs = { 'q': query,
                   'page': page + 1,
                   'apikey': apiKey };
    request.json = true;

    Request.get(request, function (err, response, body) {
        if (!err && response && response.statusCode === 200) {
            deferred.resolve([ body, 604800 ]);
        } else {
            if (err) {
                console.log('Search error: ' + err);
                deferred.reject(err);
            } else if (response) {
                console.log('Search error: ' + JSON.stringify(response));
                deferred.reject(response);
            } else {
                console.log('Search error');
                deferred.reject();
            }
        }
    });

    return deferred.promise;
};

function expiration(movie) {
    var release = new Date().addYears(-7);

    if (movie.release_dates) {
        var dates = movie.release_dates;

        if (dates.theater) {
            release = dateFromString(dates.theater);
        } else if (dates.dvd) {
            release = dateFromString(dates.dvd);
        }
    }

    var movieAge = release.getDaysBetween(new Date());
    if (movieAge < 1) movieAge = 1;

    var daysToCache = Math.ceil(movieAge / 365);

    return daysToCache * 86400;
}

function imdbId(movie) {
    return movie.alternate_ids ? movie.alternate_ids.imdb : undefined;
}

function dateFromString(dateString) {
    var parts = dateString.split("-");
    return new Date(parseInt(parts[0]), parseInt(parts[1]) - 1, parseInt(parts[2]));
}

